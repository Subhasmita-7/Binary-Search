We can easily observe that the number of rotations in an array is equal to the index(0-based index) of its minimum element.
So, in order to solve this problem, we have to find the index of the minimum element.
Input Format: arr = [4,5,6,7,0,1,2,3]
Result: 4
Explanation: The original array should be [0,1,2,3,4,5,6,7]. So, we can notice that the array has been rotated 4 times.


class Solution {
    public int findKRotation(ArrayList<Integer> nums) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        int ans = Integer.MAX_VALUE;
        int index = -1;

        while(low<=high){
            int mid = (low + high)/2;
            
            if(nums.get(low) <= nums.get(high)){
                if(nums.get(low)<ans){
                    ans = nums.get(low);
                    index = low;
                }
                break;
            }

            if(nums.get(low) <= nums.get(mid)){
                if(nums.get(low)<ans){
                    ans = nums.get(low);
                    index = low;
                }
                else{
                    low = mid + 1;
                }
            }

            if(nums.get(mid)<=nums.get(high)){
                if(nums.get(mid) < ans){
                    index = mid;
                    ans = nums.get(mid);
                }
                else{
                    high = mid - 1;
                }
            }
        }
        return index;
    }
}
